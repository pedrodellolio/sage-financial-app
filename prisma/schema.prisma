generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Profile Profile[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Profile {
  id        String   @id @default(cuid())
  userId    String
  title     String
  isActive  Boolean
  createdAt DateTime @default(now())

  user        User          @relation(fields: [userId], references: [id])
  Transaction Transaction[]
  Label       Label[]
}

model Transaction {
  id        String   @id @default(cuid())
  profileId String
  title     String
  valueBrl  Decimal
  type      Type
  createdAt DateTime @default(now())
  ocurredAt DateTime @default(now())

  profile              Profile                @relation(fields: [profileId], references: [id])
  LabelsOnTransactions LabelsOnTransactions[]
}

model Label {
  id                   String                 @id @default(cuid())
  profileId            String
  title                String
  colorHex             String
  isActive             Boolean
  createdAt            DateTime               @default(now())
  profile              Profile                @relation(fields: [profileId], references: [id])
  LabelsOnTransactions LabelsOnTransactions[]
}

model LabelsOnTransactions {
  label         Label       @relation(fields: [labelId], references: [id])
  labelId       String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  createdAt     DateTime    @default(now())

  @@id([labelId, transactionId])
}

enum Type {
  EXPENSE
  INCOME
}
