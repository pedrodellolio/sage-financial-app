generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  selectedProfileId String?   @unique

  selectedProfile Profile? @relation(name: "SelectedProfile", fields: [selectedProfileId], references: [id])

  accounts Account[]
  sessions Session[]
  profiles Profile[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Profile {
  id        String   @id @default(cuid())
  userId    String
  title     String   @unique
  isActive  Boolean
  createdAt DateTime @default(now())

  user   User     @relation(fields: [userId], references: [id])
  Label  Label[]
  User   User?    @relation("SelectedProfile")
  Wallet Wallet[]
  Chart  Chart[]
  File   File[]
  Budget Budget[]
}

model Wallet {
  id          String  @id @default(cuid())
  profileId   String
  month       Int
  year        Int
  expensesBrl Decimal
  incomeBrl   Decimal

  profile     Profile       @relation(fields: [profileId], references: [id])
  Transaction Transaction[]
}

model Transaction {
  id         String          @id @default(cuid())
  walletId   String
  fileId     String?
  title      String
  valueBrl   Decimal
  type       TransactionType
  createdAt  DateTime        @default(now())
  occurredAt DateTime        @default(now())

  wallet Wallet  @relation(fields: [walletId], references: [id])
  file   File?   @relation(fields: [fileId], references: [id])
  labels Label[]
}

model Label {
  id           String        @id @default(cuid())
  profileId    String
  title        String        @unique
  colorHex     String
  isActive     Boolean
  createdAt    DateTime      @default(now())
  profile      Profile       @relation(fields: [profileId], references: [id])
  transactions Transaction[]
  BudgetGoal   BudgetGoal[]
}

model SystemLabel {
  id       String @id @default(cuid())
  title    String @unique
  colorHex String
}

model Budget {
  id         String       @id @default(cuid())
  profileId  String
  month      Int
  year       Int
  BudgetGoal BudgetGoal[]
  profile    Profile      @relation(fields: [profileId], references: [id])
}

model BudgetGoal {
  id       String         @id @default(cuid())
  labelId  String
  budgetId String
  value    Int
  type     BudgetGoalType

  label  Label  @relation(fields: [labelId], references: [id])
  budget Budget @relation(fields: [budgetId], references: [id])
}

model File {
  id         String   @id @default(cuid())
  profileId  String
  name       String
  uploadedAt DateTime @default(now())

  profile     Profile       @relation(fields: [profileId], references: [id])
  Transaction Transaction[]
}

model Chart {
  id            String @id @default(cuid())
  profileId     String
  chartTypeId   String
  xAxisOptionId String
  yAxisOptionId String

  type    ChartType    @relation(fields: [chartTypeId], references: [id])
  xAxis   XAxisOptions @relation(fields: [xAxisOptionId], references: [id])
  yAxis   YAxisOptions @relation(fields: [yAxisOptionId], references: [id])
  profile Profile      @relation(fields: [profileId], references: [id])
}

model XAxisOptions {
  id       String  @id @default(cuid())
  title    String
  isActive Boolean

  Chart Chart[]
}

model YAxisOptions {
  id       String  @id @default(cuid())
  title    String
  isActive Boolean

  Chart Chart[]
}

model ChartType {
  id       String  @id @default(cuid())
  title    String
  isActive Boolean

  Chart Chart[]
}

enum TransactionType {
  EXPENSE
  INCOME
}

enum BudgetGoalType {
  PERCENTAGE
  CURRENCY
}
